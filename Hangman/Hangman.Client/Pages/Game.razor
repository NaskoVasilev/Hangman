@page "/game"
@inherits GameComponent
@inject IJSRuntime jsRuntime

@if (this.GameEngine.Tracker.HasAvailableJokers)
{
    <button class="btn btn-dark joker-btn" @onclick="@UseJoker">Use Joker</button>
}
<div class="lg-text text-dark text-center">Category: @CategoryName</div>
<div class="playing-word text-dark text-center">@GameEngine.PlayingWord</div>
@*<div class="d-flex justify-content-center mt-5">
    <input class="form-control letter-input text-success" type="text" name="letter" @bind="@Letter" />
    <button class="btn btn-dark ml-1 check-btn" @onclick="@Check">Check</button>
</div>*@

<div class="d-flex justify-content-center flex-wrap w-75 mx-auto">
    @foreach (var currentLetter in letters)
    {
        <div class="alphabet-letter text-dark">@currentLetter</div>
    }
</div>

@code{
    char[] letters = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };

    public async Task InitializeInstance()
    {
        await jsRuntime.InvokeAsync<object>("createInstance", DotNetObjectRef.Create(this));
    }

    protected override async Task OnInitAsync()
    {
        await InitializeInstance();
        await base.OnInitAsync();
    }

    [JSInvokable]
    public async Task ReceiveLetter(string letter)
    {
        await Check(letter.ToLower());
    }
}
